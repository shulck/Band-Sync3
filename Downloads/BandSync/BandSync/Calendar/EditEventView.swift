import SwiftUI
import FirebaseFirestore

struct EditEventView: View {
    @Environment(\.presentationMode) var presentationMode
    var event: Event

    @State private var updatedEvent: Event
    @State private var showingLocationSearch = false
    @State private var showingSetlistPicker = false

    init(event: Event) {
        self.event = event
        _updatedEvent = State(initialValue: event)
    }

    // MARK: - Event Type Requirements

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–µ—Ç–ª–∏—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    private func eventNeedsSetlist(_ type: String) -> Bool {
        return ["Concert", "Festival", "Rehearsal"].contains(type)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ
    private func eventNeedsHotel(_ type: String) -> Bool {
        return ["Concert", "Festival", "Meeting", "Photo Session", "Interview"].contains(type)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≥–æ–Ω–æ—Ä–∞—Ä
    private func eventNeedsFee(_ type: String) -> Bool {
        return ["Concert", "Festival", "Photo Session"].contains(type)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    private func eventNeedsCoordinator(_ type: String) -> Bool {
        return ["Concert", "Festival"].contains(type)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
    private func eventNeedsOrganizer(_ type: String) -> Bool {
        return ["Concert", "Festival", "Meeting", "Rehearsal", "Photo Session", "Interview"].contains(type)
    }

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Main Information")) {
                    TextField("Name", text: $updatedEvent.title)
                    DatePicker("Date", selection: $updatedEvent.date, displayedComponents: [.date, .hourAndMinute])
                    Picker("Type", selection: $updatedEvent.type) {
                        ForEach(["Concert", "Festival", "Meeting", "Rehearsal", "Photo Session", "Interview"], id: \.self) {
                            Text($0)
                        }
                    }
                    Picker("Status", selection: $updatedEvent.status) {
                        ForEach(["Reserved", "Confirmed"], id: \.self) {
                            Text($0)
                        }
                    }
                }

                Section(header: Text("Location")) {
                    HStack {
                        TextField("Location", text: $updatedEvent.location)
                        Button(action: {
                            showingLocationSearch = true
                        }) {
                            Image(systemName: "map")
                                .foregroundColor(.blue)
                        }
                    }
                }

                // –°–µ–∫—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
                if eventNeedsOrganizer(updatedEvent.type) {
                    Section(header: Text("Organizer")) {
                        TextField("Name", text: $updatedEvent.organizer.name)
                        TextField("Phone", text: $updatedEvent.organizer.phone)
                            .keyboardType(.phonePad)
                        TextField("Email", text: $updatedEvent.organizer.email)
                            .keyboardType(.emailAddress)
                            .autocapitalization(.none)
                    }
                }

                // –°–µ–∫—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π
                if eventNeedsCoordinator(updatedEvent.type) {
                    Section(header: Text("Coordinator")) {
                        TextField("Name", text: $updatedEvent.coordinator.name)
                        TextField("Phone", text: $updatedEvent.coordinator.phone)
                            .keyboardType(.phonePad)
                        TextField("Email", text: $updatedEvent.coordinator.email)
                            .keyboardType(.emailAddress)
                            .autocapitalization(.none)
                    }
                }

                // –°–µ–∫—Ü–∏—è –æ—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
                if eventNeedsHotel(updatedEvent.type) {
                    Section(header: Text("Hotel")) {
                        TextField("Address", text: $updatedEvent.hotel.address)
                        TextField("Check-in", text: $updatedEvent.hotel.checkIn)
                        TextField("Check-out", text: $updatedEvent.hotel.checkOut)
                    }
                }

                // –°–µ–∫—Ü–∏—è –≥–æ–Ω–æ—Ä–∞—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤, —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π –∏ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π
                if eventNeedsFee(updatedEvent.type) {
                    Section(header: Text("Fee")) {
                        TextField("Amount", text: $updatedEvent.fee)
                            .keyboardType(.decimalPad)
                    }
                }

                // –°–µ–∫—Ü–∏—è —Å–µ—Ç–ª–∏—Å—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤, —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π –∏ —Ä–µ–ø–µ—Ç–∏—Ü–∏–π
                if eventNeedsSetlist(updatedEvent.type) {
                    Section(header: Text("Setlist")) {
                        if updatedEvent.setlist.isEmpty {
                            Text("No setlist selected")
                                .foregroundColor(.gray)
                        } else {
                            ForEach(updatedEvent.setlist, id: \.self) { song in
                                Text(song)
                            }
                            .onDelete { indices in
                                var newSetlist = updatedEvent.setlist
                                newSetlist.remove(atOffsets: indices)
                                updatedEvent.setlist = newSetlist
                            }
                        }

                        Button("Change setlist") {
                            showingSetlistPicker = true
                        }
                    }
                }

                // –°–µ–∫—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
                Section(header: Text("Daily Schedule")) {
                    ForEach(0..<updatedEvent.schedule.count, id: \.self) { index in
                        HStack {
                            TextField("Time", text: Binding(
                                get: { updatedEvent.schedule[index].time },
                                set: { updatedEvent.schedule[index].time = $0 }
                            ))
                            .frame(width: 80)
                            .keyboardType(.numbersAndPunctuation)

                            TextField("Event", text: Binding(
                                get: { updatedEvent.schedule[index].activity },
                                set: { updatedEvent.schedule[index].activity = $0 }
                            ))
                        }
                    }
                    .onDelete(perform: deleteScheduleItem)

                    Button(action: addScheduleItem) {
                        Label("Add schedule item", systemImage: "plus")
                    }
                }

                Section(header: Text("Notes")) {
                    TextEditor(text: $updatedEvent.notes)
                        .frame(height: 100)
                }

                Button("Save changes", action: saveChanges)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(8)
            }
            .navigationTitle("Edit Event")
            .navigationBarItems(leading: Button("Cancel") {
                presentationMode.wrappedValue.dismiss()
            })
            .sheet(isPresented: $showingLocationSearch) {
                LocationSearchView(selectedLocation: $updatedEvent.location)
            }
            .sheet(isPresented: $showingSetlistPicker) {
                SetlistPickerView(selectedSetlist: $updatedEvent.setlist)
                    .onDisappear {
                        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        print("üìù Setlist picker –∑–∞–∫—Ä—ã—Ç, –≤—ã–±—Ä–∞–Ω —Å–µ—Ç–ª–∏—Å—Ç: \(updatedEvent.setlist)")
                    }
            }
        }
    }

    func addScheduleItem() {
        var updatedSchedule = updatedEvent.schedule
        updatedSchedule.append(DailyScheduleItem(time: "12:00", activity: ""))
        updatedEvent.schedule = updatedSchedule
    }

    func deleteScheduleItem(at offsets: IndexSet) {
        var updatedSchedule = updatedEvent.schedule
        updatedSchedule.remove(atOffsets: offsets)
        updatedEvent.schedule = updatedSchedule
    }

    func saveChanges() {
        Firestore.firestore()
            .collection("events")
            .document(event.id)
            .setData(updatedEvent.asDictionary) { error in
                if error == nil {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    saveContact(updatedEvent.organizer, role: "Organizer")
                    saveContact(updatedEvent.coordinator, role: "Coordinator")

                    presentationMode.wrappedValue.dismiss()
                } else {
                    print("‚ùå Edit error: \(error!.localizedDescription)")
                }
            }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Firebase
    func saveContact(_ contact: EventContact, role: String) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –∏–º—è —É–∫–∞–∑–∞–Ω–æ
        if contact.name.isEmpty {
            return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        }

        let db = Firestore.firestore()
        let contactData: [String: Any] = [
            "name": contact.name,
            "phone": contact.phone,
            "email": contact.email,
            "role": role,
            "venue": updatedEvent.location,
            "rating": 0,
            "notes": "",
            "createdAt": FieldValue.serverTimestamp()
        ]

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ (–≤–º–µ—Å—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        db.collection("contacts")
            .whereField("name", isEqualTo: contact.name)
            .getDocuments { snapshot, error in
                if let error = error {
                    print("‚ùå Error checking contact: \(error.localizedDescription)")
                    return
                }

                if let snapshot = snapshot, snapshot.documents.isEmpty {
                    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
                    db.collection("contacts").document().setData(contactData) { error in
                        if let error = error {
                            print("‚ùå Error saving contact: \(error.localizedDescription)")
                        } else {
                            print("‚úÖ Contact saved successfully")
                        }
                    }
                } else {
                    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if let document = snapshot?.documents.first {
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        var updatedData = contactData
                        updatedData["updatedAt"] = FieldValue.serverTimestamp()

                        db.collection("contacts").document(document.documentID).updateData(updatedData) { error in
                            if let error = error {
                                print("‚ùå Error updating contact: \(error.localizedDescription)")
                            } else {
                                print("‚úÖ Contact updated successfully")
                            }
                        }
                    }
                }
            }
    }
}
