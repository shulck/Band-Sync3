import Foundation
import FirebaseFirestore
import FirebaseAuth

class ChatService: ObservableObject {
    @Published var chatRooms: [ChatRoom] = []
    @Published var messages: [ChatMessage] = []

    private let db = Firestore.firestore()
    private var chatRoomsListener: ListenerRegistration?
    private var messagesListener: ListenerRegistration?

    // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    var currentUserId: String? {
        return Auth.auth().currentUser?.uid
    }

    var currentUserName: String {
        return Auth.auth().currentUser?.displayName ?? "Member"
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func fetchChatRooms() {
        guard let userId = currentUserId else {
            print("‚õîÔ∏è Failed to get user ID")
            return
        }

        print("üîÑ Loading chats for user: \(userId)")

        chatRoomsListener?.remove()

        chatRoomsListener = db.collection("chatRooms")
            .whereField("participants", arrayContains: userId)
            .addSnapshotListener { [weak self] querySnapshot, error in
                guard let self = self else { return }

                if let error = error {
                    print("‚õîÔ∏è Error getting chats: \(error.localizedDescription)")
                    return
                }

                print("‚úÖ Received chats: \(querySnapshot?.documents.count ?? 0)")

                self.chatRooms = querySnapshot?.documents.compactMap { document -> ChatRoom? in
                    let chatRoom = ChatRoom(document: document)
                    print("üìù Chat: \(chatRoom?.name ?? "no name")")
                    return chatRoom
                } ?? []

                print("üèÅ Total chats loaded: \(self.chatRooms.count)")
            }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    func fetchMessages(for chatRoomId: String) {
        messagesListener?.remove()

        messagesListener = db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .order(by: "timestamp", descending: false)
            .addSnapshotListener { [weak self] querySnapshot, error in
                guard let self = self else { return }

                if let error = error {
                    print("‚õîÔ∏è Error getting messages: \(error.localizedDescription)")
                    return
                }

                self.messages = querySnapshot?.documents.compactMap { document in
                    return ChatMessage(document: document)
                } ?? []

                // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                self.markMessagesAsRead(in: chatRoomId)
            }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    func sendMessage(text: String, in chatRoomId: String) {
        guard let userId = currentUserId, !text.isEmpty else { return }

        let message = ChatMessage(
            senderId: userId,
            senderName: currentUserName,
            text: text
        )

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        let messageRef = db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .document()

        messageRef.setData(message.asDict) { error in
            if let error = error {
                print("‚õîÔ∏è Error sending message: \(error.localizedDescription)")
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
                self.updateLastMessage(text: text, in: chatRoomId)
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    private func updateLastMessage(text: String, in chatRoomId: String) {
        let chatRef = db.collection("chatRooms").document(chatRoomId)

        chatRef.updateData([
            "lastMessage": text,
            "lastMessageDate": Timestamp(date: Date())
        ]) { error in
            if let error = error {
                print("‚õîÔ∏è Error updating last message: \(error.localizedDescription)")
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    func createChat(name: String, participants: [String], isGroupChat: Bool = false) {
        guard let userId = currentUserId else {
            print("‚õîÔ∏è Failed to get user ID for chat creation")
            return
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        var allParticipants = participants
        if !allParticipants.contains(userId) {
            allParticipants.append(userId)
        }

        print("üîÑ Creating chat: \(name) with \(allParticipants.count) participants")

        let chatRoom = ChatRoom(
            name: name,
            participants: allParticipants,
            lastMessageDate: Date(),
            isGroupChat: isGroupChat
        )

        let newChatRef = db.collection("chatRooms").document()

        newChatRef.setData(chatRoom.asDict) { error in
            if let error = error {
                print("‚õîÔ∏è Error creating chat: \(error.localizedDescription)")
            } else {
                print("‚úÖ Chat successfully created, ID: \(newChatRef.documentID)")

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                    self.fetchChatRooms()
                }
            }
        }
    }

    // –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    private func markMessagesAsRead(in chatRoomId: String) {
        guard let userId = currentUserId else { return }

        // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let unreadMessages = messages.filter {
            $0.senderId != userId && !$0.isRead
        }

        for message in unreadMessages {
            db.collection("chatRooms")
                .document(chatRoomId)
                .collection("messages")
                .document(message.id)
                .updateData(["isRead": true])
        }
    }

    // –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞
    func stopListening() {
        chatRoomsListener?.remove()
        messagesListener?.remove()
    }
}
