import Foundation
import FirebaseFirestore
import FirebaseAuth

class ChatService: ObservableObject {
    @Published var chatRooms: [ChatRoom] = []
    @Published var messages: [ChatMessage] = []
    @Published var isLoading: Bool = false
    @Published var errorMessage: String = ""
    @Published var hasMoreMessages: Bool = false

    private let db = Firestore.firestore()
    private var chatRoomsListener: ListenerRegistration?
    private var messagesListener: ListenerRegistration?
    private var lastMessage: QueryDocumentSnapshot?
    private let messagesPerPage = 20

    // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    var currentUserId: String? {
        return Auth.auth().currentUser?.uid
    }

    var currentUserName: String {
        return Auth.auth().currentUser?.displayName ?? "Member"
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func fetchChatRooms() {
        guard let userId = currentUserId else {
            print("‚õîÔ∏è Failed to get user ID")
            errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            return
        }

        isLoading = true
        print("üîÑ Loading chats for user: \(userId)")

        chatRoomsListener?.remove()

        chatRoomsListener = db.collection("chatRooms")
            .whereField("participants", arrayContains: userId)
            .addSnapshotListener { [weak self] querySnapshot, error in
                guard let self = self else { return }
                self.isLoading = false

                if let error = error {
                    print("‚õîÔ∏è Error getting chats: \(error.localizedDescription)")
                    self.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: \(error.localizedDescription)"
                    return
                }

                print("‚úÖ Received chats: \(querySnapshot?.documents.count ?? 0)")

                self.chatRooms = querySnapshot?.documents.compactMap { document -> ChatRoom? in
                    let chatRoom = ChatRoom(document: document)
                    print("üìù Chat: \(chatRoom?.name ?? "no name")")
                    return chatRoom
                } ?? []

                print("üèÅ Total chats loaded: \(self.chatRooms.count)")
            }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    func fetchMessages(for chatRoomId: String) {
        isLoading = true
        errorMessage = ""
        messagesListener?.remove()

        messagesListener = db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .order(by: "timestamp", descending: true)
            .limit(to: messagesPerPage)
            .addSnapshotListener { [weak self] querySnapshot, error in
                guard let self = self else { return }
                self.isLoading = false

                if let error = error {
                    print("‚õîÔ∏è Error getting messages: \(error.localizedDescription)")
                    self.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: \(error.localizedDescription)"
                    return
                }

                self.hasMoreMessages = (querySnapshot?.documents.count ?? 0) >= self.messagesPerPage

                if let documents = querySnapshot?.documents, !documents.isEmpty {
                    self.lastMessage = documents.last

                    self.messages = documents.compactMap { document in
                        return ChatMessage(document: document)
                    }.sorted { $0.timestamp < $1.timestamp } // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                } else {
                    self.messages = []
                }

                // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                self.markMessagesAsRead(in: chatRoomId)
            }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—ã—Ö)
    func loadMoreMessages(for chatRoomId: String) {
        guard let lastMessage = self.lastMessage else {
            self.hasMoreMessages = false
            return
        }

        isLoading = true

        db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .order(by: "timestamp", descending: true)
            .limit(to: messagesPerPage)
            .start(afterDocument: lastMessage)
            .getDocuments { [weak self] snapshot, error in
                guard let self = self else { return }
                self.isLoading = false

                if let error = error {
                    print("‚õîÔ∏è Error loading more messages: \(error.localizedDescription)")
                    self.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: \(error.localizedDescription)"
                    return
                }

                if let documents = snapshot?.documents, !documents.isEmpty {
                    self.lastMessage = documents.last

                    let oldMessages = documents.compactMap { document -> ChatMessage? in
                        return ChatMessage(document: document)
                    }.sorted { $0.timestamp < $1.timestamp }

                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                    self.messages = oldMessages + self.messages

                    // –ï—Å—Ç—å –ª–∏ –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    self.hasMoreMessages = documents.count >= self.messagesPerPage
                } else {
                    self.hasMoreMessages = false
                }
            }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    func sendMessage(text: String, in chatRoomId: String) {
        guard let userId = currentUserId, !text.isEmpty else { return }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è"
        let newMessageId = UUID().uuidString
        let message = ChatMessage(
            id: newMessageId,
            senderId: userId,
            senderName: currentUserName,
            text: text,
            status: .sending
        )

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID
        DispatchQueue.main.async {
            self.messages.append(message)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        let messageRef = db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .document(newMessageId)

        messageRef.setData(message.asDict) { [weak self] error in
            guard let self = self else { return }

            if let error = error {
                print("‚õîÔ∏è Error sending message: \(error.localizedDescription)")
                self.errorMessage = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: \(error.localizedDescription)"

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–æ—à–∏–±–∫–∞"
                if let index = self.messages.firstIndex(where: { $0.id == newMessageId }) {
                    DispatchQueue.main.async {
                        self.messages[index].status = .failed
                    }
                }
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
                self.updateLastMessage(text: text, in: chatRoomId)

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                if let index = self.messages.firstIndex(where: { $0.id == newMessageId }) {
                    DispatchQueue.main.async {
                        self.messages[index].status = .sent
                    }
                }
            }
        }
    }

    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    func resendMessage(_ message: ChatMessage, in chatRoomId: String) {
        guard message.status == .failed else { return }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è"
        if let index = self.messages.firstIndex(where: { $0.id == message.id }) {
            DispatchQueue.main.async {
                self.messages[index].status = .sending
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
        let messageRef = db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .document(message.id)

        messageRef.setData(message.asDict) { [weak self] error in
            guard let self = self else { return }

            if let error = error {
                print("‚õîÔ∏è Error resending message: \(error.localizedDescription)")
                self.errorMessage = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: \(error.localizedDescription)"

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–æ—à–∏–±–∫–∞"
                if let index = self.messages.firstIndex(where: { $0.id == message.id }) {
                    DispatchQueue.main.async {
                        self.messages[index].status = .failed
                    }
                }
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
                self.updateLastMessage(text: message.text, in: chatRoomId)

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                if let index = self.messages.firstIndex(where: { $0.id == message.id }) {
                    DispatchQueue.main.async {
                        self.messages[index].status = .sent
                    }
                }
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    private func updateLastMessage(text: String, in chatRoomId: String) {
        let chatRef = db.collection("chatRooms").document(chatRoomId)

        chatRef.updateData([
            "lastMessage": text,
            "lastMessageDate": Timestamp(date: Date())
        ]) { error in
            if let error = error {
                print("‚õîÔ∏è Error updating last message: \(error.localizedDescription)")
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    func createChat(name: String, participants: [String], isGroupChat: Bool = false) {
        guard let userId = currentUserId else {
            print("‚õîÔ∏è Failed to get user ID for chat creation")
            errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            return
        }

        isLoading = true

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        var allParticipants = participants
        if !allParticipants.contains(userId) {
            allParticipants.append(userId)
        }

        print("üîÑ Creating chat: \(name) with \(allParticipants.count) participants")

        let chatRoom = ChatRoom(
            name: name,
            participants: allParticipants,
            lastMessageDate: Date(),
            isGroupChat: isGroupChat
        )

        let newChatRef = db.collection("chatRooms").document()

        newChatRef.setData(chatRoom.asDict) { [weak self] error in
            guard let self = self else { return }
            self.isLoading = false

            if let error = error {
                print("‚õîÔ∏è Error creating chat: \(error.localizedDescription)")
                self.errorMessage = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: \(error.localizedDescription)"
            } else {
                print("‚úÖ Chat successfully created, ID: \(newChatRef.documentID)")

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                    self.fetchChatRooms()
                }
            }
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    func editMessage(messageId: String, in chatRoomId: String, newText: String) {
        guard let userId = currentUserId else {
            errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            return
        }

        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        guard let index = messages.firstIndex(where: { $0.id == messageId && $0.senderId == userId }) else {
            errorMessage = "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            return
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Firebase
        let messageRef = db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .document(messageId)

        messageRef.updateData([
            "text": newText,
            "status": MessageStatus.edited.rawValue
        ]) { [weak self] error in
            guard let self = self else { return }

            if let error = error {
                print("‚õîÔ∏è Error editing message: \(error.localizedDescription)")
                self.errorMessage = "–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: \(error.localizedDescription)"
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                DispatchQueue.main.async {
                    self.messages[index].text = newText
                    self.messages[index].status = .edited
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if index == self.messages.count - 1 {
                    self.updateLastMessage(text: newText, in: chatRoomId)
                }
            }
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    func deleteMessage(messageId: String, in chatRoomId: String) {
        guard let userId = currentUserId else {
            errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            return
        }

        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        guard let index = messages.firstIndex(where: { $0.id == messageId && $0.senderId == userId }) else {
            errorMessage = "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ"
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        let isLastMessage = index == messages.count - 1

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Firebase
        let messageRef = db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .document(messageId)

        messageRef.delete { [weak self] error in
            guard let self = self else { return }

            if let error = error {
                print("‚õîÔ∏è Error deleting message: \(error.localizedDescription)")
                self.errorMessage = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: \(error.localizedDescription)"
            } else {
                // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                DispatchQueue.main.async {
                    self.messages.remove(at: index)

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
                    if isLastMessage {
                        self.updateLastMessageAfterDeletion(in: chatRoomId)
                    }
                }
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    private func updateLastMessageAfterDeletion(in chatRoomId: String) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
        if let lastMessage = messages.last {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
            updateLastMessage(text: lastMessage.text, in: chatRoomId)
            return
        }

        // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .order(by: "timestamp", descending: true)
            .limit(to: 1)
            .getDocuments { [weak self] snapshot, error in
                guard let self = self else { return }

                if let error = error {
                    print("‚õîÔ∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: \(error.localizedDescription)")
                    return
                }

                if let document = snapshot?.documents.first,
                   let lastMessage = ChatMessage(document: document) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    let chatRef = self.db.collection("chatRooms").document(chatRoomId)
                    chatRef.updateData([
                        "lastMessage": lastMessage.text,
                        "lastMessageDate": Timestamp(date: lastMessage.timestamp)
                    ])
                } else {
                    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    let chatRef = self.db.collection("chatRooms").document(chatRoomId)
                    chatRef.updateData([
                        "lastMessage": FieldValue.delete(),
                        "lastMessageDate": FieldValue.delete()
                    ])
                }
            }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    func getUnreadMessagesCount(in chatRoomId: String, completion: @escaping (Int) -> Void) {
        guard let userId = currentUserId else {
            completion(0)
            return
        }

        db.collection("chatRooms")
            .document(chatRoomId)
            .collection("messages")
            .whereField("senderId", isNotEqualTo: userId)
            .whereField("isRead", isEqualTo: false)
            .getDocuments { snapshot, error in
                if let error = error {
                    print("‚õîÔ∏è Error getting unread messages: \(error.localizedDescription)")
                    completion(0)
                    return
                }

                completion(snapshot?.documents.count ?? 0)
            }
    }

    // –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    private func markMessagesAsRead(in chatRoomId: String) {
        guard let userId = currentUserId else { return }

        // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let unreadMessages = messages.filter {
            $0.senderId != userId && !$0.isRead
        }

        for message in unreadMessages {
            db.collection("chatRooms")
                .document(chatRoomId)
                .collection("messages")
                .document(message.id)
                .updateData(["isRead": true])
        }
    }

    // –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞
    func stopListening() {
        chatRoomsListener?.remove()
        messagesListener?.remove()
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
    func deleteChat(chatId: String, completion: @escaping (Bool) -> Void) {
        guard let userId = currentUserId else {
            errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            completion(false)
            return
        }

        isLoading = true

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —á–∞—Ç—É
        db.collection("chatRooms").document(chatId).getDocument { [weak self] snapshot, error in
            guard let self = self else { return }

            if let error = error {
                self.isLoading = false
                self.errorMessage = "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: \(error.localizedDescription)"
                completion(false)
                return
            }

            guard let data = snapshot?.data(),
                  let participants = data["participants"] as? [String],
                  participants.contains(userId) else {
                self.isLoading = false
                self.errorMessage = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞"
                completion(false)
                return
            }

            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
            let messagesRef = self.db.collection("chatRooms").document(chatId).collection("messages")

            messagesRef.getDocuments { [weak self] (snapshot, error) in
                guard let self = self else { return }

                if let error = error {
                    self.isLoading = false
                    self.errorMessage = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞: \(error.localizedDescription)"
                    completion(false)
                    return
                }

                // –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–∞–ª—è–µ–º —Å–∞–º —á–∞—Ç
                if snapshot?.documents.isEmpty ?? true {
                    self.deleteChatDocument(chatId: chatId, completion: completion)
                    return
                }

                // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                let group = DispatchGroup()
                var hasError = false

                // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for document in snapshot?.documents ?? [] {
                    group.enter()
                    messagesRef.document(document.documentID).delete { error in
                        if let error = error {
                            print("‚õîÔ∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: \(error.localizedDescription)")
                            hasError = true
                        }
                        group.leave()
                    }
                }

                // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª—è–µ–º —Å–∞–º —á–∞—Ç
                group.notify(queue: .main) {
                    if hasError {
                        self.isLoading = false
                        self.errorMessage = "–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
                        completion(false)
                    } else {
                        self.deleteChatDocument(chatId: chatId, completion: completion)
                    }
                }
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–∞—Ç–∞
    private func deleteChatDocument(chatId: String, completion: @escaping (Bool) -> Void) {
        db.collection("chatRooms").document(chatId).delete { [weak self] error in
            guard let self = self else { return }
            self.isLoading = false

            if let error = error {
                self.errorMessage = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: \(error.localizedDescription)"
                print("‚õîÔ∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: \(error.localizedDescription)")
                completion(false)
            } else {
                print("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                completion(true)
            }
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    func editChat(chatId: String, newName: String, completion: @escaping (Bool) -> Void) {
        guard let userId = currentUserId else {
            errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            DispatchQueue.main.async {
                completion(false)
            }
            return
        }

        isLoading = true

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —á–∞—Ç—É
        db.collection("chatRooms").document(chatId).getDocument { [weak self] snapshot, error in
            guard let self = self else {
                DispatchQueue.main.async {
                    completion(false)
                }
                return
            }

            if let error = error {
                self.isLoading = false
                self.errorMessage = "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: \(error.localizedDescription)"
                print("‚õîÔ∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: \(error.localizedDescription)")
                DispatchQueue.main.async {
                    completion(false)
                }
                return
            }

            guard let data = snapshot?.data(),
                  let participants = data["participants"] as? [String],
                  participants.contains(userId),
                  let isGroupChat = data["isGroupChat"] as? Bool else {
                self.isLoading = false
                self.errorMessage = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞"
                print("‚õîÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç")
                DispatchQueue.main.async {
                    completion(false)
                }
                return
            }

            // –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
            if !isGroupChat {
                self.isLoading = false
                self.errorMessage = "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞"
                print("‚õîÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞")
                DispatchQueue.main.async {
                    completion(false)
                }
                return
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            let chatRef = self.db.collection("chatRooms").document(chatId)

            chatRef.updateData([
                "name": newName
            ]) { [weak self] error in
                guard let self = self else {
                    DispatchQueue.main.async {
                        completion(false)
                    }
                    return
                }
                self.isLoading = false

                if let error = error {
                    self.errorMessage = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: \(error.localizedDescription)"
                    print("‚õîÔ∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: \(error.localizedDescription)")
                    DispatchQueue.main.async {
                        completion(false)
                    }
                } else {
                    print("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    DispatchQueue.main.async {
                        completion(true)
                    }
                }
            }
        }
    }
}
