import SwiftUI
import FirebaseAuth
import FirebaseFirestore

struct ChatView: View {
    let chatRoom: ChatRoom
    @StateObject private var chatService = ChatService()
    @State private var messageText = ""
    @State private var showingParticipants = false
    @State private var showEmojiPicker = false
    @State private var scrollToBottom = true

    private var isCurrentUserInChat: Bool {
        guard let currentUserId = chatService.currentUserId else { return false }
        return chatRoom.participants.contains(currentUserId)
    }

    var body: some View {
        VStack {
            // ะกะพะพะฑัะตะฝะธั
            ScrollViewReader { scrollView in
                ScrollView {
                    if chatService.hasMoreMessages {
                        Button(action: {
                            chatService.loadMoreMessages(for: chatRoom.id)
                        }) {
                            if chatService.isLoading {
                                ProgressView()
                                    .padding()
                            } else {
                                Text("ะะฐะณััะทะธัั ะฟัะตะดัะดััะธะต ัะพะพะฑัะตะฝะธั")
                                    .foregroundColor(.blue)
                                    .padding()
                            }
                        }
                        .disabled(chatService.isLoading)
                        .padding(.top, 8)
                    }
                    
                    LazyVStack(spacing: 8) {
                        ForEach(chatService.messages) { message in
                            MessageBubble(message: message,
                                          isFromCurrentUser: message.senderId == chatService.currentUserId)
                                .id(message.id) // ะดะปั ะฐะฒัะพัะบัะพะปะปะฐ
                                .onTapGesture {
                                    // ะะพะฒัะพัะฝะฐั ะพัะฟัะฐะฒะบะฐ ะฟัะธ ะพัะธะฑะบะต
                                    if message.status == .failed && message.senderId == chatService.currentUserId {
                                        chatService.resendMessage(message, in: chatRoom.id)
                                    }
                                }
                        }
                    }
                    .padding(.horizontal)
                    .padding(.top, 8)
                }
                .onChange(of: chatService.messages.count) { _ in
                    // ะะฒัะพัะบัะพะปะป ะบ ะฟะพัะปะตะดะฝะตะผั ัะพะพะฑัะตะฝะธั ัะพะปัะบะพ ะฟัะธ ะฟะตัะฒะพะน ะทะฐะณััะทะบะต
                    // ะธะปะธ ะฟัะธ ะพัะฟัะฐะฒะบะต ะฝะพะฒะพะณะพ ัะพะพะฑัะตะฝะธั
                    if scrollToBottom, let lastMessage = chatService.messages.last {
                        withAnimation {
                            scrollView.scrollTo(lastMessage.id, anchor: .bottom)
                        }
                    }
                }
            }

            // ะคะพัะผะฐ ะพัะฟัะฐะฒะบะธ ัะพะพะฑัะตะฝะธั
            if isCurrentUserInChat {
                VStack(spacing: 0) {
                    // ะกะพะพะฑัะตะฝะธะต ะพะฑ ะพัะธะฑะบะต, ะตัะปะธ ะตััั
                    if !chatService.errorMessage.isEmpty {
                        Text(chatService.errorMessage)
                            .foregroundColor(.red)
                            .font(.caption)
                            .padding(.horizontal)
                            .padding(.top, 4)
                    }
                    
                    HStack {
                        // ะะฝะพะฟะบะฐ ะฒัะฑะพัะฐ ัะผะฐะนะปะธะบะพะฒ
                        Button(action: {
                            showEmojiPicker.toggle()
                        }) {
                            Image(systemName: "face.smiling")
                                .font(.system(size: 20))
                                .foregroundColor(.blue)
                                .padding(8)
                        }
                        
                        TextField("ะกะพะพะฑัะตะฝะธะต...", text: $messageText)
                            .padding(10)
                            .background(Color(.systemGray6))
                            .cornerRadius(20)
                        
                        Button(action: sendMessage) {
                            Image(systemName: "paperplane.fill")
                                .foregroundColor(messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? .gray : .blue)
                                .padding(10)
                        }
                        .disabled(messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
                    }
                    .padding(.horizontal)
                    .padding(.vertical, 8)
                    
                    // ะะฐะฝะตะปั ัะผะพะดะทะธ
                    if showEmojiPicker {
                        EmojiPickerView(onEmojiSelected: { emoji in
                            messageText += emoji
                        })
                        .frame(height: 200)
                        .transition(.move(edge: .bottom))
                    }
                }
            } else {
                Text("ะั ะฝะต ัะฒะปัะตัะตัั ััะฐััะฝะธะบะพะผ ััะพะณะพ ัะฐัะฐ")
                    .foregroundColor(.gray)
                    .padding()
            }
        }
        .navigationTitle(chatRoom.name)
        .toolbar {
            if chatRoom.isGroupChat {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: { showingParticipants = true }) {
                        Image(systemName: "person.3")
                    }
                }
            }
            
            ToolbarItem(placement: .navigationBarTrailing) {
                Toggle(isOn: $scrollToBottom) {
                    Image(systemName: "arrow.down.to.line")
                }
                .toggleStyle(SwitchToggleStyle(tint: .blue))
            }
        }
        .sheet(isPresented: $showingParticipants) {
            ParticipantsView(participants: chatRoom.participants)
        }
        .onAppear {
            chatService.fetchMessages(for: chatRoom.id)
        }
        .onDisappear {
            chatService.stopListening()
        }
    }

    private func sendMessage() {
        let trimmedText = messageText.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !trimmedText.isEmpty else { return }

        chatService.sendMessage(text: trimmedText, in: chatRoom.id)
        messageText = ""
        scrollToBottom = true // ะะบะปััะฐะตะผ ะฐะฒัะพัะบัะพะปะป ะฟัะธ ะพัะฟัะฐะฒะบะต ัะพะพะฑัะตะฝะธั
    }
}

// ะะพะผะฟะพะฝะตะฝั ะฟัะทััั ัะพะพะฑัะตะฝะธั
struct MessageBubble: View {
    let message: ChatMessage
    let isFromCurrentUser: Bool

    var body: some View {
        HStack {
            if isFromCurrentUser {
                Spacer()
            }

            VStack(alignment: isFromCurrentUser ? .trailing : .leading, spacing: 2) {
                if !isFromCurrentUser {
                    Text(message.senderName)
                        .font(.caption)
                        .foregroundColor(.gray)
                        .padding(.leading, 8)
                }

                HStack {
                    Text(message.text)
                        .padding(10)
                        .background(isFromCurrentUser ? Color.blue : Color(.systemGray5))
                        .foregroundColor(isFromCurrentUser ? .white : .primary)
                        .cornerRadius(16)
                    
                    // ะะฝะดะธะบะฐัะพั ััะฐัััะฐ ัะพะพะฑัะตะฝะธั (ัะพะปัะบะพ ะดะปั ัะฒะพะธั ัะพะพะฑัะตะฝะธะน)
                    if isFromCurrentUser {
                        statusIcon
                            .font(.system(size: 12))
                    }
                }

                Text(formatTime(message.timestamp))
                    .font(.caption2)
                    .foregroundColor(.gray)
                    .padding(.horizontal, 8)
            }

            if !isFromCurrentUser {
                Spacer()
            }
        }
    }
    
    private var statusIcon: some View {
        Group {
            switch message.status {
            case .sending:
                Image(systemName: "clock")
                    .foregroundColor(.gray)
            case .sent:
                Image(systemName: "checkmark")
                    .foregroundColor(.gray)
            case .delivered:
                Image(systemName: "checkmark")
                    .foregroundColor(.blue)
            case .read:
                Image(systemName: "checkmark.circle.fill")
                    .foregroundColor(.blue)
            case .failed:
                Image(systemName: "exclamationmark.circle")
                    .foregroundColor(.red)
            }
        }
    }

    private func formatTime(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm"
        return formatter.string(from: date)
    }
}

// ะกะพะทะดะฐะตะผ ะบะพะผะฟะพะฝะตะฝั ะดะปั ะฒัะฑะพัะฐ ัะผะพะดะทะธ
struct EmojiPickerView: View {
    var onEmojiSelected: (String) -> Void
    
    // ะะฐะธะฑะพะปะตะต ะธัะฟะพะปัะทัะตะผัะต ัะผะพะดะทะธ ะดะปั ัะฐะฑะพัะตะณะพ ัะฐัะฐ
    private let frequentEmojis = ["๐", "๐", "๐", "๐ค", "๐", "๐", "๐", "๐", "๐", "๐", "๐", "๐ค", "๐ง", "โฐ", "๐", "โ", "โ", "โผ๏ธ", "โ", "๐ฅ"]
    
    // ะะฐัะตะณะพัะธะธ ัะผะพะดะทะธ
    private let emojiCategories: [String: [String]] = [
        "ะงะฐัััะต": ["๐", "๐", "๐", "๐ค", "๐", "๐", "๐", "๐", "๐", "๐", "๐", "๐ค", "๐ง", "โฐ", "๐", "โ", "โ", "โผ๏ธ", "โ", "๐ฅ"],
        "ะกะผะฐะนะปะธะบะธ": ["๐", "๐", "๐", "๐", "๐", "๐", "๐", "๐คฃ", "๐", "๐", "๐", "๐", "๐", "๐", "๐ฅฐ", "๐", "๐", "๐", "๐", "๐", "๐", "๐", "๐", "๐คช", "๐คจ", "๐ง", "๐ค", "๐", "๐คฉ", "๐ฅณ"],
        "ะะตััั": ["๐", "๐", "๐", "โ๏ธ", "๐ค", "๐ค", "๐ค", "๐ค", "๐", "๐", "๐", "๐", "โ๏ธ", "๐", "๐ค", "๐๏ธ", "โ", "๐", "๐", "๐", "๐ค", "๐ช", "โ", "๐ค", "๐ค"],
        "ะกะธะผะฒะพะปั": ["โค๏ธ", "๐งก", "๐", "๐", "๐", "๐", "๐ค", "โฃ๏ธ", "๐", "๐", "๐", "๐", "๐", "๐", "๐", "๐", "โฎ๏ธ", "โ๏ธ", "โช๏ธ", "๐๏ธ", "โธ๏ธ", "โก๏ธ", "๐ฏ", "โฏ๏ธ", "โฆ๏ธ"],
        "ะะฑัะตะบัั": ["โฐ", "๐ฑ", "๐ป", "โจ๏ธ", "๐ฅ๏ธ", "๐จ๏ธ", "๐ท", "๐", "๐", "๐ก", "๐ฆ", "๐", "๐", "โ๏ธ", "๐", "๐", "๐", "๐", "๐", "๐"]
    ]
    
    @State private var selectedCategory = "ะงะฐัััะต"
    
    var body: some View {
        VStack(spacing: 8) {
            // ะะธะฝะธั-ะธะฝะดะธะบะฐัะพั, ััะพ ะฟะฐะฝะตะปั ะผะพะถะฝะพ ัะบัััั
            RoundedRectangle(cornerRadius: 2)
                .fill(Color.gray.opacity(0.3))
                .frame(width: 40, height: 4)
                .padding(.top, 4)
            
            // ะะฐัะตะณะพัะธะธ ัะผะพะดะทะธ
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 16) {
                    ForEach(Array(emojiCategories.keys), id: \.self) { category in
                        Text(category)
                            .font(.subheadline)
                            .foregroundColor(selectedCategory == category ? .blue : .gray)
                            .onTapGesture {
                                selectedCategory = category
                            }
                    }
                }
                .padding(.horizontal)
            }
            
            // ะกะตัะบะฐ ัะผะพะดะทะธ
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 10), spacing: 8) {
                ForEach(emojiCategories[selectedCategory] ?? [], id: \.self) { emoji in
                    Text(emoji)
                        .font(.system(size: 24))
                        .onTapGesture {
                            onEmojiSelected(emoji)
                        }
                }
            }
            .padding(.horizontal)
            .padding(.bottom)
        }
        .background(Color(.systemBackground).edgesIgnoringSafeArea(.bottom))
    }
}
