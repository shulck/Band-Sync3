import Foundation
import FirebaseFirestore

struct ChatRoom: Identifiable, Equatable {
    var id: String
    var name: String
    var participants: [String] // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    var lastMessage: String?
    var lastMessageDate: Date?
    var isGroupChat: Bool
    
    // –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤
    static func == (lhs: ChatRoom, rhs: ChatRoom) -> Bool {
        return lhs.id == rhs.id
    }
    
    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å Firebase
    var asDict: [String: Any] {
        var dict: [String: Any] = [
            "name": name,
            "participants": participants,
            "isGroupChat": isGroupChat
        ]
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if let lastMessage = lastMessage {
            dict["lastMessage"] = lastMessage
        }
        
        if let lastMessageDate = lastMessageDate {
            dict["lastMessageDate"] = Timestamp(date: lastMessageDate)
        }
        
        return dict
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑ Firebase –¥–æ–∫—É–º–µ–Ω—Ç–∞
    init?(document: QueryDocumentSnapshot) {
        let data = document.data()
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è, –ª–æ–≥–∏—Ä—É—è –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üîç Parsing chat document: \(document.documentID)")
        
        guard let name = data["name"] as? String else {
            print("‚ùå Missing name in chat document: \(document.documentID)")
            return nil
        }
        
        guard let participants = data["participants"] as? [String] else {
            print("‚ùå Missing participants in chat document: \(document.documentID)")
            return nil
        }
        
        guard let isGroupChat = data["isGroupChat"] as? Bool else {
            print("‚ùå Missing isGroupChat in chat document: \(document.documentID), defaulting to false")
            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º return, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –±–ª–æ–∫–∞ guard
            return nil
        }
        
        self.id = document.documentID
        self.name = name
        self.participants = participants
        self.lastMessage = data["lastMessage"] as? String
        self.lastMessageDate = (data["lastMessageDate"] as? Timestamp)?.dateValue()
        self.isGroupChat = data["isGroupChat"] as? Bool ?? false
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("‚úÖ Successfully parsed chat: \(id), name: \(name), participants: \(participants.count)")
    }
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init(id: String = UUID().uuidString,
         name: String,
         participants: [String],
         lastMessage: String? = nil,
         lastMessageDate: Date? = nil,
         isGroupChat: Bool = false) {
        self.id = id
        self.name = name
        self.participants = participants
        self.lastMessage = lastMessage
        self.lastMessageDate = lastMessageDate
        self.isGroupChat = isGroupChat
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    func addingParticipant(_ userId: String) -> ChatRoom {
        var updatedParticipants = self.participants
        if !updatedParticipants.contains(userId) {
            updatedParticipants.append(userId)
        }
        
        return ChatRoom(
            id: self.id,
            name: self.name,
            participants: updatedParticipants,
            lastMessage: self.lastMessage,
            lastMessageDate: self.lastMessageDate,
            isGroupChat: self.isGroupChat
        )
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    func removingParticipant(_ userId: String) -> ChatRoom {
        let updatedParticipants = self.participants.filter { $0 != userId }
        
        return ChatRoom(
            id: self.id,
            name: self.name,
            participants: updatedParticipants,
            lastMessage: self.lastMessage,
            lastMessageDate: self.lastMessageDate,
            isGroupChat: self.isGroupChat
        )
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
    func withUpdatedName(_ newName: String) -> ChatRoom {
        return ChatRoom(
            id: self.id,
            name: newName,
            participants: self.participants,
            lastMessage: self.lastMessage,
            lastMessageDate: self.lastMessageDate,
            isGroupChat: self.isGroupChat
        )
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —á–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    func containsParticipant(_ userId: String) -> Bool {
        return participants.contains(userId)
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    // –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    func displayNameForUser(currentUserId: String, usersMap: [String: String]) -> String {
        // –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω–æ–µ –∏–º—è
        if isGroupChat {
            return name
        }
        
        // –î–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–∞—Ö–æ–¥–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        for participantId in participants {
            if participantId != currentUserId, let participantName = usersMap[participantId] {
                return participantName
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è
        return name
    }
}
